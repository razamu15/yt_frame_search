<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Youtube Reverse Search</title>
    <link rel="stylesheet" href="/css/base.css">
</head>

<body>
    <nav id="navbar"></nav>

    <div id="video_form_cont">
        <form id="video_form">
            <input type="text" id="yt_url" name="yt_url" placeholder="https://www.youtube.com/watch?v=ebeNeQFUMa0&t=62s"
                pattern="https:\/\/www\.youtube\.com\/watch\?v=[a-zA-z0-9]{11}.*" required>
            <input type="submit" value="submit">
        </form>
    </div>

    <div id="video_cont">

    </div>

    <div id="screen_capture_ctrls" hidden>
        <form id="screen_capture_form">
            <div id="from_video_checkbox">
                <input type="radio" id="from_video" name="frame_source" value="current" onclick="toggle_ts(this)"
                    checked>
                <label for="from_video">From Current Video Screen</label>
            </div>
            <div id="ts_input_cont">
                <div id="from_ts_checkbox">
                    <input type="radio" id="from_ts" name="frame_source" value="timestamp" onclick="toggle_ts(this)">
                    <label for="from_ts">From Timestamp: </label>
                </div>
                <input type="text" id="time_stamp" name="time_stamp" placeholder="ex. 4:43"
                    pattern="[0-9]{1,2}:[0-5][0-9]" maxlength="5" disabled>
            </div>
            <input type="submit" value="Capture Video Screen">
        </form>
    </div>



    <div id="canvas_container">
        <canvas id="canvas" style="overflow:auto"></canvas>
    </div>

    <div id="screen_shot_ctrls" hidden>
        <a id="down_link" download="screenshot.png" href="">
            <button id="down_btn">Download Screenchot</button>
        </a>

        <a id="search_link" onclick="">
            <button id="search_btn">Analyze Screenchot</button>
        </a>
    </div>

    <div id="analysis"></div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script>
        //var token = ; // TODO <- server generated key thing to prevent cross site scripting
        var video_id = null;
        var img_blob = null;
        var img_ts = null;

        $("#video_form").submit(function (event) {
            // we prevent the form from making a post request
            event.preventDefault();
            
            // empty the divs and canvas in case content from a previous user action is there
            let canvas = document.getElementById('canvas');
            canvas.getContext('2d').clearRect(0,0,canvas.width, canvas.height);
            $("#analysis").empty();

            // get the youtube_url from the form
            let form_data = $(this).serializeArray();
            // the form will only contain one item at index 0
            let url = form_data[0].value
            // the first index after the split will always be youtube so we know the second is query params
            query_params = new URLSearchParams(url.split("watch?")[1]);
            // call the add_video function with the video id parameter retreived from the url
            add_video(query_params.get("v"));
        })

        function add_video(youtubeID) {
            // first empty the container in case if there is already a video there
            $("#video_cont").empty();
            // add a video container
            let vid_route_params = new URLSearchParams();
            vid_route_params.set("video_id", youtubeID);
            vid_route_params.set("token", "<%- token %>");
            $("#video_cont").append(
                `<video controls width="250" height="200" src="/get_video?${vid_route_params.toString()}" id="video"> 
                    This browser does not support the HTML5 video element.
                </video>`
            );
            // set global variable
            video_id = youtubeID;

            // TODO: set an event handler on video for error playback thingy so that 
            // when a failed get info call(either by server itself or livestream or by incorrect vid) from the backend comes,
            // we can say that something went wrong to the user

            // show the capture screenshot controls
            $("#screen_capture_ctrls").show();
        }

        $("#screen_capture_form").submit(function (event) {
            // stop the form from making a post request
            event.preventDefault();
            // empty the analysis div in case content from a previous user action is there
            $("#analysis").empty();
            // pause the video before we do anything so that the scene doesnt shift
            let video = document.getElementById('video');
            video.pause();

            // TODO: set canvas to loading


            // get the form input and see which option user picked
            let form_data = $(this).serializeArray();

            let frame_src = form_data.find(function (obj) {
                return obj.name === "frame_source";
            }).value;

            let ts = null;
            // if the capture is by timestamp we need to seek the video to that time
            if (frame_src === "timestamp") {
                // get the timestamp value from the from
                ts = form_data.find(function (obj) {
                    return obj.name === "time_stamp";
                }).value;
                // calculate the seconds from the timestamp
                let times = ts.split(":");
                // the parseint calls are safe because of the regex pattern on the timestamp input field
                let total_seconds = 60 * parseInt(times[0]) + parseInt(times[1]);
                // make sure the seek time is the valid range
                if (total_seconds < 0 || total_seconds > video.duration) {
                    // alert the user saying timestamp is not valid
                    alert("Timestamp not valid");
                    return;
                }
                ts = total_seconds;
                video.currentTime = total_seconds;
                // when we capture by timestamp, we need to set an event lsitener that will make the call to draw frame 
                // so we draw the correct frame when the data after the seek has been loaded in the video
                video.addEventListener('canplay', function drawing_event(event) {
                    // remove the event listener immediately because we only want to do this once
                    video.removeEventListener('canplay', drawing_event);
                    draw_frame();
                });
            } else {
                // frame_src === "current"
                draw_frame();
                ts = video.currentTime;
            }
            // set the global timestamp variable
            img_ts = ts;
        })

        function draw_frame() {
            // get the video and draw its current frame onto the canvas
            let canvas = document.getElementById('canvas');
            let video = document.getElementById('video');
            //let video = document.getElementById('video');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            canvas.getContext('2d').drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
            // convert the image from the canvas to a blob
            canvas.toBlob((blob) => {
                img_blob = blob;
                link = (window.URL ? URL : webkitURL).createObjectURL(blob);
                $("#down_link").attr('href', link);
            });
            // show the download screenshot and reverse search buttons once we have the image drawn
            $("#screen_shot_ctrls").show();
        }

        $("#search_btn").click(function (event) {
            // first we check to make sure the image blob in not null
            if (img_blob === null || img_ts ===null) {
                alert("you need to capture and image first before analyzing it");
                return;
            }
            // update the div to show that results are loading TODO

            // build the query params for the post route
            let analysis_params = new URLSearchParams();
            analysis_params.set("screen_ts", img_ts);
            analysis_params.set("video_id", video_id);
            analysis_params.set("token", "<%- token %>");

            // create and send the HTTP request with the image data
            var req = new XMLHttpRequest();
            req.open("POST", "/analyze_image?" + analysis_params.toString() , true);
            req.onload = function (event) {
                // check the response status and if its good pass the results to a function that will show them on the webpage
                if (this.status != 200) {
                    console.error("analysis failed");
                } else {
                    render_vision_results(JSON.parse(this.response));
                }
            };
            req.send(img_blob);
        })

        function render_vision_results(vision_resp) {
            console.log(vision_resp);
            // first empty the div from any content that may be previously
            $("#analysis").empty();

            // google starter code ripoff for printing web annotations
            const webDetection = vision_resp.webDetection;
            if (webDetection.fullMatchingImages.length) {
                console.log(`Full matches found: ${webDetection.fullMatchingImages.length}`);
                $("#analysis").append('<ul id="full_matching"><h2>Full Matching Images Found on the Web</h2></ul>');
                webDetection.fullMatchingImages.forEach(image => {
                    $("#full_matching").append(`<li>  URL: ${image.url}</li>`);
                    //console.log(`  Score: ${image.score}`);
                });
            }

            if (webDetection.partialMatchingImages.length) {
                console.log(`Partial matches found: ${webDetection.partialMatchingImages.length}`);
                $("#analysis").append('<ul id="partial_matching"><h2>Partial Matching Images Found on the Web</h2></ul>');
                webDetection.partialMatchingImages.forEach(image => {
                    $("#partial_matching").append(`<li>  URL: ${image.url}</li>`);
                    //console.log(`  Score: ${image.score}`);
                });
            }

            if (webDetection.webEntities.length) {
                console.log(`Web entities found: ${webDetection.webEntities.length}`);
                $("#analysis").append('<ul id="web_entities"><h2>Related Items Found on the Web</h2></ul>');
                webDetection.webEntities.forEach(webEntity => {
                    $("#web_entities").append(`<li>  Description: ${webEntity.description}</li>`);
                    //console.log(`  Score: ${webEntity.score}`);
                });
            }

            if (webDetection.bestGuessLabels.length) {
                console.log(`Best guess labels found: ${webDetection.bestGuessLabels.length}`);
                $("#analysis").append('<ul id="best_guess"><h2>Image Content Guess</h2></ul>');
                webDetection.bestGuessLabels.forEach(label => {
                    $("#best_guess").append(`<li>  Label: ${label.label}</li>`);
                });
            }

            const labels = vision_resp.labelAnnotations;
            console.log(`Best guess labels found: ${labels.length}`);
            $("#analysis").append('<ul id="labels"><h2>Image Labels</h2></ul>');
            labels.forEach((label) => {
                $("#labels").append(`<li>  Label: ${label.description}</li>`);
            });
        }

        function toggle_ts(radio_ele) {
            if (radio_ele.value === "current" && radio_ele.checked) {
                // disable the time stamp text input field
                $('#time_stamp').attr('disabled', true);
            } else if (radio_ele.value === "timestamp" && radio_ele.checked) {
                // enable the time stamp text input field
                $('#time_stamp').attr('disabled', false);
                $('#time_stamp').attr('required', true);
            }
        }

    </script>
</body>

</html>