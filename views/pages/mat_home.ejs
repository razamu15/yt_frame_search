<!DOCTYPE html>
<html lang="en">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0" />
    <title>YouTube Video Screen Analyzer</title>

    <!-- CSS  -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
    <link href="css/style.css" type="text/css" rel="stylesheet" media="screen,projection" />
</head>

<body>
    <!-- NAVIGATION BAR -->
    <nav class="light-blue lighten-1" role="navigation">
        <div class="nav-wrapper container">
            <a id="logo-container" href="#" class="brand-logo" style="display: inline-flex; align-items: center;">
                <svg xmlns="http://www.w3.org/2000/svg" height="95" viewBox="0 0 24 24" width="95">
                    <g>
                        <path transform="matrix(0.6,0,0,0.6,8.5,7.4)" d="M -5.9 -3.9 h 24 v 24 H -5.9 z" fill="none" />
                        <path transform="matrix(0.6,0,0,0.6,8.5,7.4)"
                            d="M -2.9 1.1 v 4 h 2 V 1.1 h 4 V -0.9 H -0.9 c -1.1 0 -2 0.9 -2 2 z m 2 10 H -2.9 v 4 c 0 1.1 0.9 2 2 2 h 4 v -2 H -0.9 v -4 z m 14 4 h -4 v 2 h 4 c 1.1 0 2 -0.9 2 -2 v -4 h -2 v 4 z m 0 -16 h -4 v 2 h 4 v 4 h 2 V 1.1 c 0 -1.1 -0.9 -2 -2 -2 z" />
                    </g>
                    <g transform="matrix(1,0,0,1,24,0)">
                        <path transform="matrix(0.3,0,0,0.3,-13.2,11.1)" d="M -7.9 -8.5 h 24 v 24 H -7.9 z"
                            fill="none" />
                        <path transform="matrix(0.3,0,0,0.3,-13.2,11.1)"
                            d="M 4.1 -6.5 C -1.4 -6.5 -5.9 -2.1 -5.9 3.5 s 4.5 10 10 10 s 10 -4.5 10 -10 S 9.7 -6.5 4.1 -6.5 z m -2 14.5 v -9 l 6 4.5 l -6 4.5 z" />
                    </g>

                </svg>
                <!-- <span>YT Screen Analyzer</span> -->
            </a>
            <ul class="right hide-on-med-and-down">
                <li><a class="modal-trigger" href="#contact_modal">Contact</a></li>
            </ul>

            <ul id="nav-mobile" class="sidenav">
                <li><a class="modal-trigger" href="#contact_modal">Contact</a></li>
            </ul>
            <a href="#" data-target="nav-mobile" class="sidenav-trigger"><i class="material-icons">menu</i></a>
        </div>
    </nav>

    <!-- MAIN FRONT CARD -->
    <div class="section no-pad-bot" id="index-banner">
        <div class="container">
            <br><br>
            <h1 class="header center orange-text">YouTube Video Screen Analyzer</h1>
            <div class="row center">
                <h5 class="header col s12 light">Easily analyze a video screenshot or search the internet with it to
                    find out more about what you are watching!</h5>
            </div>
            <br>

            <div class="row center">
                <form id="video_form" class="row valign-wrapper">
                    <div class="input-field col s10">
                        <input id="yt_url" name="yt_url" type="text" class="validate"
                            pattern="(https:)?\/?\/?((www|m)?\.?youtube\.com\/watch\?v=[a-zA-z0-9-]{11}.*|youtu\.be\/[a-zA-z0-9-]{11}.*)"
                            required>
                        <label for="yt_url">Youtube URL</label>
                        <span class="helper-text" data-error="Invalid Youtube Url"
                            data-success="right">youtube.com/watch?v=ebeNeQFUMa0&t=62s</span>
                    </div>
                    <div class="col s2">
                        <button class="btn waves-effect waves-light" type="submit" name="action">Go
                            <i class="material-icons right">send</i>
                        </button>
                    </div>
                </form>
            </div>

            <br> <!-- TOOK OUT A LINE BREAK HERE -->
        </div>
    </div>

    <!-- CONTACT FORM MODAL -->
    <div id="contact_modal" class="modal">
        <div class="modal-content">
            <h4>Contact</h4>
            <p>Please use this form to address any issues or for general inquiries</p>

            <div class="row">
                <form id="contact_form" class="col s12">
                    <div class="row">
                        <div class="input-field col s6">
                            <i class="material-icons prefix">account_circle</i>
                            <input id="contact_name" name="contact_name" type="text" class="validate">
                            <label for="contact_name">Name</label>
                        </div>
                        <div class="input-field col s6">
                            <i class="material-icons prefix">email</i>
                            <input id="contact_email" name="contact_email" type="text" class="validate">
                            <label for="contact_email">Email</label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="input-field col s12">
                            <i class="material-icons prefix">format_align_justify</i>
                            <textarea id="contact_text" name="contact_text" class="materialize-textarea"></textarea>
                            <label for="textarea1">Message</label>
                        </div>
                    </div>
                </form>
            </div>

        </div>
        <div class="modal-footer">
            <a href="#!" class="modal-close waves-effect waves-red btn-flat">Cancel</a>
            <button class="btn waves-effect waves-light modal-close" type="submit" name="action"
                form="contact_form">Send
                <i class="material-icons right">send</i>
            </button>
        </div>
    </div>

    <!-- VIDEO AND SCREEN CAP CONTROLS -->
    <div id="video_cont_parent" class="container" hidden>
        <div class="section">
            <div id="video_cont">
            </div>
        </div>

        <!-- VIDEO CAPTURE CONTROLS -->
        <div class="section">

            <form id="screen_capture_form">
                <div class="grid_item">
                    <label>
                        <input id="from_video" name="frame_source" value="current" onclick="toggle_ts(this)"
                            type="radio" checked />
                        <span>Current Video Frame</span>
                    </label>
                </div>
                <div class="grid_item" id="grid_item_input">
                    <label>
                        <input type="radio" id="from_ts" name="frame_source" value="timestamp"
                            onclick="toggle_ts(this)" />
                        <span>By Timestamp</span>
                        <div id="radio_input_div" class="input-field inline">
                            <input type="text" id="time_stamp" name="time_stamp" placeholder="4:43"
                                pattern="[0-9]{1,2}:[0-5][0-9]" maxlength="5" class="validate" disabled>
                        </div>
                    </label>
                </div>
                <div class="grid_item">
                    <button class="btn waves-effect waves-light" type="submit" name="action">Capture
                        <i class="material-icons right">photo_camera</i>
                    </button>
                </div>
                <!-- <button class="btn waves-effect waves-light" type="submit" name="action">Capture & Analyze<i class="material-icons right">photo_camera</i></button> -->
            </form>

        </div>

    </div>

    <!-- SCREENSHOT CANVAS AND ANALYSIS & DOWNLOAD BUTTON  -->
    <div class="container" id="canvas_actions" hidden>
        <!-- divider -->
        <div class="section">
            <div class="row">
                <div class="divider"></div>
            </div>
        </div>

        <div class="row center">
            <canvas id="canvas"></canvas>
        </div>

        <div class="row">
            <div class="canvas_btns col s12 m6 center-align"><a id="down_link" download="screenshot.png"
                    class="waves-effect waves-light btn-large"><i
                        class="material-icons left">file_download</i>Download</a></div>
            <div class="canvas_btns col s12 m6 center-align"><a id="search_btn"
                    class="waves-effect waves-light btn-large"><i
                        class="material-icons right">center_focus_weak</i>Analyze</a></div>
        </div>
    </div>

    <!-- LOADING SIGN -->
    <div class="container">
        <div id="loading" class="row" hidden>
            <div class="section">
                <div class="row">
                    <div class="divider"></div>
                </div>
            </div>

            <div class="col s6 offset-s3">
                <h5 class="center-align"> Loading...</h5>
                <div class="progress">
                    <div class="indeterminate"></div>
                </div>
                <div id="t" data-t="<%- t %>" hidden></div>
            </div>
        </div>
    </div>

    <!-- ANALYSIS RESULTS -->
    <div id="analysis_parent_cont" class="container" hidden>
        <div class="section">
            <div class="row">
                <div class="divider"></div>
            </div>
        </div>

        <div class="section">
            <div id="analysis" class="row">
                <ul class="collapsible">
                    <li class="webDetection">
                        <div class="collapsible-header"><i class="material-icons">search</i>Image Search Results</div>
                        <div class="collapsible-body analysis_category webDetection">
                            <span>Lorem ipsum dolor sit amet.</span>
                        </div>
                    </li>
                    <li class="labelAnnotations">
                        <div class="collapsible-header"><i class="material-icons">center_focus_weak</i>Image Content
                            Guess</div>
                        <div class="collapsible-body analysis_category labelAnnotations">
                            <span>Lorem ipsum dolor sit amet.</span></div>
                    </li>
                    <li class="landmarkAnnotations">
                        <div class="collapsible-header"><i class="material-icons">landscape</i>Landmarks Detected</div>
                        <div class="collapsible-body analysis_category landmarkAnnotations"><span>Lorem ipsum dolor
                                sit amet.</span></div>
                    </li>
                    <li class="textAnnotations">
                        <div class="collapsible-header"><i class="material-icons">text_fields</i>Image Text</div>
                        <div class="collapsible-body analysis_category textAnnotations"><span>Lorem ipsum dolor sit
                                amet.</span></div>
                    </li>
                    <li class="logoAnnotations">
                        <div class="collapsible-header"><i class="material-icons">details</i>Logos Detected</div>
                        <div class="collapsible-body analysis_category logoAnnotations"><span>Lorem ipsum dolor sit
                                amet.</span></div>
                    </li>
                </ul>

            </div>
        </div>
    </div>

    <!-- divider -->
    <div class="container">
        <div class="section">
            <div class="row">
                <div class="divider"></div>
            </div>
        </div>
    </div>

    <!-- FEATURES CARD COLECTION -->
    <div class="container">
        <div class="section">

            <!--   Icon Section   -->
            <div class="row">

                <div class="col s12 m4">
                    <div class="icon-block">
                        <h2 class="center light-blue-text"><i class="material-icons">subscriptions</i></h2>
                        <h5 class="center">Choose Any YouTube Video</h5>

                        <p class="light">Choose from any YouTube's millions of videos. Easily get what you are looking
                            for by
                            just pasting the video URL above and Go!</p>
                    </div>
                </div>

                <div class="col s12 m4">
                    <div class="icon-block">
                        <h2 class="center light-blue-text"><i class="material-icons">wallpaper</i></h2>
                        <h5 class="center">Capture the Video Screen</h5>

                        <p class="light">Easily find the exact scene you want using a timestamp or if you dont remember,
                            watch the video to to find the part you want to know more about and press capture to
                            screenshot what you are watching.
                        </p>
                    </div>
                </div>

                <div class="col s12 m4">
                    <div class="icon-block">
                        <h2 class="center light-blue-text"><i class="material-icons">check_circle</i></h2>
                        <h5 class="center">View Analysis & Search Results</h5>

                        <p class="light">Cant make sense of what you are seeing or want to learn more? Click on the
                            Analyze button to find out which
                            show or movie a clip is from or any webpages that contain that same image! </p>
                    </div>
                </div>

            </div>

        </div>
        <br><br>
    </div>

    <!-- FOOTER -->
    <footer class="page-footer orange">
        <div class="container">
            <div class="row">
                <div class="col l6 s12">
                    <h5 class="white-text">Company Bio</h5>
                    <p class="grey-text text-lighten-4">Ever saw a clip or shot in a YouTube video and wanted to know
                        what it was or where it was from? Now you
                        won't ever need to comment "what is ____ at 4:43?" Just analyze the video screen and find out!
                    </p>

                </div>
                <div class="col l3 s12">
                    <h5 class="white-text">Languages</h5>
                    <ul>
                        <li><a class="white-text" href="#!">Fr (coming soon)</a></li>
                        <li><a class="white-text" href="#!">De (coming soon)</a></li>
                        <li><a class="white-text" href="#!">Ja (coming soon)</a></li>

                    </ul>
                </div>
                <div class="col l3 s12">
                    <h5 class="white-text">Connect</h5>
                    <ul>
                        <li><a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button"
                                data-show-count="false">Tweet</a>
                            <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
                        </li>
                        <li>
                            <div class="fb-share-button" data-href="https://developers.facebook.com/docs/plugins/"
                                data-layout="button_count" data-size="small"><a target="_blank"
                                    href="https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdevelopers.facebook.com%2Fdocs%2Fplugins%2F&amp;src=sdkpreparse"
                                    class="fb-xfbml-parse-ignore">Share</a></div>
                        </li>
                        <!-- <li><a class="white-text" href="#!">Contact</a></li> -->
                        <li><a class="white-text" href="#!">Policy</a></li>

                    </ul>
                </div>
            </div>
        </div>
        <div class="footer-copyright">
            <div class="container">
                <div class="row" style="margin-bottom: 0px;">
                    <div class="col s6">
                        Made with <a class="orange-text text-lighten-3" href="http://materializecss.com">Materialize</a>
                    </div>
                    <div class="col s6 right-align">
                        Made by <a class="orange-text text-lighten-3" href="http://tctcraza.io">tctc-raza.io</a>
                    </div>
                </div>
            </div>
        </div>
    </footer>

    <!-- FOR FACEBOOK SHARE BUTTON SCRIPT -->
    <script async defer crossorigin="anonymous"
        src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&version=v6.0"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
    <script src="js/init.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <script>
        // initialize materialize css components
        M.AutoInit();

        var video_id = null;
        var img_blob = null;
        var img_ts = null;
        var processing = null;

        $("#video_form").submit(function (event) {
            // we prevent the form from making a post request
            event.preventDefault();

            // empty the divs and canvas in case content from a previous user action is there
            let canvas = document.getElementById('canvas');
            canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
            $("#analysis_parent_cont").hide();
            $("#canvas_actions").hide();
            $(".analysis_category").empty();

            // get the youtube_url from the form
            let form_data = $(this).serializeArray();
            // the form will only contain one item at index 0
            let url = form_data[0].value
            let video_id = null;
            // the first index after the split will always be domain so we know the second is query params
            if (url.includes("youtu.be")) {
                //trim https:// off the front if its there
                url.replace(/^(https:)?\/\/+/g, '');
                video_id = url.split("/")[1];
            } else {
                query_params = new URLSearchParams(url.split("watch?")[1]);
                video_id = query_params.get("v");
            }

            // call the add_video function with the video id parameter retreived from the url
            add_video(video_id);
        })

        function add_video(youtubeID) {
            // first empty the container in case if there is already a video there
            $("#video_cont").empty();
            // add a video container
            let vid_route_params = new URLSearchParams();
            vid_route_params.set("video_id", youtubeID);
            vid_route_params.set("token", $("#t").data("t"));
            $("#video_cont").append(
                `<video id="video" width="100%" class="responsive-video" src="/get_video?${vid_route_params.toString()}" controls> 
                This browser does not support the HTML5 video element.
            </video>`
            );

            //MATERIALIZE Tings
            //may want to have a video element already there hidden and just set its src and unhide the parent continer div
            // for now though we are shoulfing the continaer div and also adding the video tag
            $("#video_cont_parent").show();


            // set an error events listener that will send an alert to the user if something goes wrong
            $("#video").on("error", function (event) {
                console.error(event);
                alert("something went wrong in video playback please try again");
                $(this).get(0).pause();
            })

            // set global variable
            video_id = youtubeID;
            // show the capture screenshot controls
            $("#screen_capture_ctrls").show();
        }

        $("#screen_capture_form").submit(function (event) {
            // stop the form from making a post request
            event.preventDefault();

            // pause the video before we do anything so that the scene doesnt shift
            let video = document.getElementById('video');
            video.pause();

            // empty the analysis div in case content from a previous user action is there
            $("#analysis_parent_cont").hide();
            $(".analysis_category").empty();
            // hide the canvas(in case theres already a canvas there) and show loading for canvas
            $("#canvas_actions").hide();
            $("#loading").show();

            // get the form input and see which option user picked
            let form_data = $(this).serializeArray();

            let frame_src = form_data.find(function (obj) {
                return obj.name === "frame_source";
            }).value;

            let ts = null;
            // if the capture is by timestamp we need to seek the video to that time
            if (frame_src === "timestamp") {
                // get the timestamp value from the from
                ts = form_data.find(function (obj) {
                    return obj.name === "time_stamp";
                }).value;
                // calculate the seconds from the timestamp
                let times = ts.split(":");
                // the parseint calls are safe because of the regex pattern on the timestamp input field
                let total_seconds = 60 * parseInt(times[0]) + parseInt(times[1]);
                // make sure the seek time is the valid range
                if (total_seconds < 0 || total_seconds > video.duration) {
                    // alert the user saying timestamp is not valid
                    // $("#canvas_loader_frame").hide(); see line 349 MATERIAL tings
                    alert("Timestamp not valid");
                    return;
                }
                ts = total_seconds;
                video.currentTime = total_seconds;
                // when we capture by timestamp, we need to set an event lsitener that will make the call to draw frame 
                // so we draw the correct frame when the data after the seek has been loaded in the video
                video.addEventListener('canplay', function drawing_event(event) {
                    // remove the event listener immediately because we only want to do this once
                    video.removeEventListener('canplay', drawing_event);
                    draw_frame();
                });
            } else {
                // frame_src === "current"
                draw_frame();
                ts = video.currentTime;
            }
            // set the global timestamp variable
            img_ts = ts;
        })

        function draw_frame() {
            // get the video and draw its current frame onto the canvas
            let canvas = document.getElementById('canvas');
            let video = document.getElementById('video');
            //let video = document.getElementById('video');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            canvas.getContext('2d').drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
            // convert the image from the canvas to a blob
            canvas.toBlob((blob) => {
                img_blob = blob;
                link = (window.URL ? URL : webkitURL).createObjectURL(blob);
                $("#down_link").attr('href', link);
            });
            // show the download screenshot and reverse search buttons once we have the image drawn
            $("#loading").hide();
            $("#canvas_actions").show();
        }

        $("#search_btn").click(function (event) {
            // first we check to make sure the image blob in not null
            if (img_blob === null || img_ts === null) {
                alert("you need to capture and image first before analyzing it");
                return;
            }
            // hide the previous analysis and show the loading sign
            $("#analysis_parent_cont").hide();
            $("#loading").show();

            // build the query params for the post route
            let analysis_params = new URLSearchParams();
            analysis_params.set("screen_ts", img_ts);
            analysis_params.set("video_id", video_id);
            analysis_params.set("token", $("#t").data("t"));

            // create and send the HTTP request with the image data
            var req = new XMLHttpRequest();
            req.open("POST", "/analyze_image?" + analysis_params.toString(), true);
            req.onload = function (event) {
                // check the response status and if its good pass the results to a function that will show them on the webpage
                if (this.status != 200) {
                    alert("Analysis failed, Please reload the page and try again");
                    console.error("analysis failed");
                    $("#loading").hide();

                } else {
                    render_vision_results(JSON.parse(this.response));
                }
            };
            req.send(img_blob);
        })

        function show_siblings(btn_elem) {
            $(btn_elem).siblings().show();
        }

        function add_list_to_markup(elem, obj_array, data_prop, initial_amount) {
            // declare an append counter
            let append_counter = 0;
            let hyperlink;

            if (data_prop === "url") {
                hyperlink = true;
            } else {
                hyperlink = false;
            }

            // for each obj in the array 
            obj_array.forEach(obj => {
                let data = obj[data_prop];
                // if the data is not blank/empty, append the data_prop value from the obj on the dom element
                if (data != "") {
                    // show the first n items up to initial amount
                    elem.append(`<p ${((append_counter > initial_amount) ? "hidden" : '')}> 
                        ${(hyperlink ? `<a href="${data}" target="_blank"> ${data} </a>` : `${data}`)} </p>`);

                    // increment the counter
                    append_counter++;
                }
            })

            // if append counter > initial_amount then add a show more button that will turn all of the elem's children to show
            if (append_counter > initial_amount) {
                elem.append('<a class="waves-effect waves-teal btn-flat" onclick="show_siblings(this)">show more</a>');
            }
        }

        function render_vision_results(vision_resp) {
            console.log(vision_resp);
            // first empty the div from any content that may be previously
            $(".analysis_category").empty();
            // show divs that may have been hidden from a previous analysis
            $("#analysis ul li").show();

            // loop over all the properties of the vision response object
            for (var prop in vision_resp) {
                if (Object.prototype.hasOwnProperty.call(vision_resp, prop)) {

                    // check if the current property has a div associated to it in the markup

                    let elem = $(`li.${prop}`);
                    if (elem.length != 0) {

                        // if it does then we populate div with data ow hide the div
                        if (vision_resp[prop].length === 0) {
                            // hide the div
                            console.log(elem, "should be hidden");
                            elem.hide();
                        } else {
                            // populate with data
                            elem = $(`div.${prop}`);
                            // this is the default key for getting data from any category array inside the vision resposne
                            let data_prop = "description";

                            // the element of the same id exists so we can populate it with the data
                            if (prop === "webDetection") {
                                // deal with web detection specially - loop through the 4 subcategories
                                let web_catgs = ["bestGuessLabels", "webEntities", "pagesWithMatchingImages", "visuallySimilarImages"]; // full/partial/MatchingImages
                                web_catgs.forEach(web_category => {
                                    // define speacial data prop
                                    if (web_category === "bestGuessLabels") {
                                        data_prop = "label";
                                    } else if (web_category.includes("Images")) { // the actual images linking things
                                        data_prop = "url";
                                    } else if (web_category === "webEntities") {
                                        data_prop = "description";
                                    }

                                    // if the subcategory is length 0 then dont do anything
                                    if (vision_resp[prop][web_category].length != 0) {
                                        elem.append('<h5>' + web_category + '</h5>');
                                        let category_div = $("<div>", { id: `${web_category}_cont`, "class": "analysis_subcategory" });
                                        elem.append(category_div);
                                        // call the function to put the list content into the dom element
                                        add_list_to_markup(category_div, vision_resp[prop][web_category], data_prop, 5);
                                        // also check to make sure we dont put the devider if this is the last subcategory
                                        if (web_catgs.indexOf(web_category) < web_catgs.length - 1) {
                                            elem.append('<div class="divider"></div>');
                                        }
                                    }
                                })
                            } else {
                                add_list_to_markup(elem, vision_resp[prop], data_prop, 5);
                            }

                        }
                    }
                }
            }

            // show all the neccessary divs once the info has been loaded
            $("#loading").hide();
            $("#analysis_parent_cont").show();
        }

        function toggle_ts(radio_ele) {
            if (radio_ele.value === "current" && radio_ele.checked) {
                // clear and disable the time stamp text input field
                $('#time_stamp').val('');
                $('#time_stamp').attr('disabled', true);
            } else if (radio_ele.value === "timestamp" && radio_ele.checked) {
                // enable the time stamp text input field
                $('#time_stamp').attr('disabled', false);
                $('#time_stamp').attr('required', true);
            }
        }

        $("#contact_form").submit(function (event) {
            // prevent the form from making a post request
            event.preventDefault();
            // get form data and prepare ajax request with it
            let form_data = $(this).serialize();
            console.log(form_data);
            $.post(`/contact_submit?token=${$("#t").data("t")}`, $(this).serialize())
                .done(function (data) {
                    // show toast to user
                    M.toast({ html: 'Message Delivered' })
                })
        })


    </script>

</body>

</html>